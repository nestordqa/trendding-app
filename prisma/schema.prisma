// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Membership {
  WOOD
  SILVER
  GOLD
  PLATINUM
}

enum AdminRole {
  ADMIN
  DEVELOPER
  POSTER
}

enum Subject {
  MATH
  HISTORY
  CHEMICAL
  SPORTS
  null
}

enum redSocial {
  FACEBOOK
  INSTAGRAM
  TWITTER
  SNAPCHAT
  LINKEDIN
}

enum PaymentMethod {
  BINANCE
  PAYPAL
  STRIPE
}

enum UserRole {
  ADMIN
  STUDENT
  TEACHER
}

model SocialMedia {
  id                String        @id @default(uuid())
  socialMedia       redSocial
  userName          String
  student           Student     @relation(fields: [studentId], references: [id])
  studentId         String         
}

model User{
  id             String      @id @default(uuid())
  info           Boolean     @default(false)
  firstName      String
  lastName       String
  email          String      @unique
  email_verified Boolean?
  gender         String?
  birthday       String?
  address        String?
  phone          String
  city           String
  province       String
  country        String
  photo          String?
  userRole       UserRole       @default(STUDENT)
  student        Student?
  teacher        Teacher?        
  active         Boolean        @default(true)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model Student {
  id             String         @id @default(uuid())
  courses        Course[]
  progress       Progress[]
  companie       String?
  superpower     String?
  earnPoint      Int?
  socialMedia    SocialMedia[]
  reviews        Review[]
  payments       Payment[]
  membership     Membership     @default(WOOD)
  user           User           @relation(fields: [userId], references: [id])
  userId         String         @unique  
}

model Teacher {
  id             String   @id @default(uuid())
  subject        Subject
  courses        Course[]
  user           User           @relation(fields: [userId], references: [id])
  userId         String         @unique 
}//RECORDAR PASAR ID DE LA MATERIA PARA SETEARLA

model Progress {
  id              String      @id @default(uuid())
  student         Student     @relation(fields: [studentId], references: [id])
  studentId       String
  course          Course      @relation(fields: [courseId], references: [id])
  courseId        String
  progressFactor  Int         @default(0)
}
model Course {
  id          String        @id @default(uuid())
  tittle      String?
  description String?
  learn       String[]
  requires    String[]
  targets     String[]
  photo       String?
  subject     Subject        @default(null)
  teachers    Teacher[]
  students    Student[]
  progress    Progress[]
  courseRole  Membership
  points      Int
  reviews     Review[]
  lections    Lection[]
  active      Boolean        @default(true)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model Lection {
  id        String      @id @default(uuid())
  title     String
  video     String
  points    Int
  photo     String
  active    Boolean     @default(true)
  test      Test[]
  complete  Boolean     @default(false)
  course    Course      @relation(fields: [courseId], references: [id])
  courseId  String
}

model Test {
  id          String       @id @default(uuid())
  title       String
  description String
  points      Int
  option      Exercises[]
  lection     Lection      @relation(fields: [lectionId], references: [id])
  lectionId   String   
}

model Exercises {
  id          String      @id @default(uuid()) 
  question    String?
  answer      String
  ok          Boolean?
  test        Test        @relation(fields: [testId], references: [id])
  testId      String
}

model Review {
  id        String      @id @default(uuid())
  rating    Int
  review    String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  student   Student?    @relation(fields: [studentId], references: [id])
  studentId String?
  course    Course?      @relation(fields: [courseId], references: [id])
  courseId  String?
  @@unique([studentId, courseId])
}

model Payment {
  id          String          @id @default(uuid())
  method      String   
  amout       Float
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  student     Student         @relation(fields: [studentId], references: [id])
  studentId   String
  membership  Membership      @default(WOOD)
}